import React, { useState, useEffect } from 'react';
import { Card, CardHeader, CardTitle, CardContent, CardDescription } from "@/components/ui/card";
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { useToast } from "@/components/ui/use-toast";
import { Send, MessageCircle, HelpCircle, ListChecks } from 'lucide-react';
import { Badge } from '@/components/ui/badge';

const faqs = [
    { id: 'faq1', question: 'ููู ูููููู ุฅูุบุงุก ุญุฌุฒู ูููุงุณุจุฉุ', answer: 'ููููู ุฅูุบุงุก ุญุฌุฒู ูู ุตูุญุฉ "ุญุฌูุฒุงุชู" ุฅุฐุง ูุงูุช ุณูุงุณุฉ ุงูุฅูุบุงุก ุงูุฎุงุตุฉ ุจูุฒููุฏ ุงูุฎุฏูุฉ ุชุณูุญ ุจุฐูู. ุชุฎุชูู ุดุฑูุท ุงูุฅูุบุงุก ูุงูุงุณุชุฑุฏุงุฏ ุจูู ูุฒููุฏู ุงูุฎุฏูุงุช.' },
    { id: 'faq2', question: 'ูุชู ูุชู ุงุณุชุฑุฏุงุฏ ุงููุจูุบ ุจุนุฏ ุงูุฅูุบุงุกุ', answer: 'ุชุณุชุบุฑู ุนูููุฉ ุงุณุชุฑุฏุงุฏ ุงููุจูุบ ุนุงุฏุฉ ูู 5 ุฅูู 10 ุฃูุงู ุนูู ุญุณุจ ุงูุจูู ุงูุฎุงุต ุจู ูุณูุงุณุงุช ูุฒููุฏ ุงูุฎุฏูุฉ.' },
    { id: 'faq3', question: 'ูู ูููููู ุชุนุฏูู ุชูุงุตูู ุญุฌุฒูุ', answer: 'ุจุนุถ ุงูุชุนุฏููุงุช ูุฏ ุชููู ูุชุงุญุฉ ุญุณุจ ุณูุงุณุฉ ูุฒูุฏ ุงูุฎุฏูุฉ. ููููู ูุญุงููุฉ ุงูุชูุงุตู ูุน ูุฒูุฏ ุงูุฎุฏูุฉ ูุจุงุดุฑุฉ ุฃู ุงูุงุชุตุงู ุจูุฑูู ุฏุนู ูููุฉ ุงููููููู ูููุณุงุนุฏุฉ.' },
    { id: 'faq4', question: 'ููู ุฃุฌุฏ ูุนูููุงุช ุงูุงุชุตุงู ุจูุฒูุฏ ุงูุฎุฏูุฉุ', answer: 'ุจุนุฏ ุชุฃููุฏ ุงูุญุฌุฒุ ุณุชุฌุฏ ูุนูููุงุช ุงูุงุชุตุงู ุจูุฒูุฏ ุงูุฎุฏูุฉ ูู ุชูุงุตูู ุงูุญุฌุฒ ุจุตูุญุฉ "ุญุฌูุฒุงุชู".' },
];

const CustomerSupport = ({ handleNavigation, handleFeatureClick: propHandleFeatureClick }) => {
    const { toast } = useToast();
    const [supportTicket, setSupportTicket] = useState({ subject: '', category: '', message: '', bookingId: '' });
    const [myTickets, setMyTickets] = useState(() => {
        const savedTickets = localStorage.getItem('lilium_customer_support_tickets_v1');
        return savedTickets ? JSON.parse(savedTickets) : [
            {id: 'TKT123', subject: 'ูุดููุฉ ูู ุงูุฏูุน', status: 'ููุชูุญุฉ', lastUpdate: 'ุฃูุณ'},
            {id: 'TKT124', subject: 'ุงุณุชูุณุงุฑ ุนู ุฎุฏูุฉ', status: 'ูุบููุฉ', lastUpdate: 'ููุฐ ุฃุณุจูุน'},
        ];
    });

    useEffect(() => {
        localStorage.setItem('lilium_customer_support_tickets_v1', JSON.stringify(myTickets));
    }, [myTickets]);

    const handleFeatureClick = (featureName) => {
        if (propHandleFeatureClick) {
            propHandleFeatureClick(featureName);
        } else {
            toast({
                title: "๐ง ููุฒุฉ ููุฏ ุงูุชุทููุฑ",
                description: `ููุฒุฉ "${featureName}" ููุณุช ููุนูุฉ ุจุนุฏุ ูููู ููููู ุทูุจูุง ูู ุฑุณุงูุชู ุงููุงุฏูุฉ! ๐`,
            });
        }
    };


    const handleInputChange = (e) => {
        setSupportTicket(prev => ({ ...prev, [e.target.name]: e.target.value }));
    };
    
    const handleSelectChange = (value) => {
        setSupportTicket(prev => ({ ...prev, category: value }));
    };

    const handleSubmitTicket = () => {
        if (!supportTicket.subject || !supportTicket.category || !supportTicket.message) {
            toast({ title: "ุฎุทุฃ", description: "ูุฑุฌู ููุก ุฌููุน ุงูุญููู ุงููุทููุจุฉ (ุงูููุถูุนุ ุงูุชุตูููุ ุงูุฑุณุงูุฉ).", variant: "destructive" });
            return;
        }
        const newTicketId = `TKT${Date.now().toString().slice(-4)}`;
        setMyTickets(prev => [{id: newTicketId, subject: supportTicket.subject, status: 'ููุชูุญุฉ', lastUpdate: 'ุงูุขู'}, ...prev]);
        toast({
            title: "ุชู ุฅุฑุณุงู ุทูุจ ุงูุฏุนู",
            description: `ุชู ุงุณุชูุงู ุทูุจู ุจุฑูู ${newTicketId}. ุณูุชูุงุตู ูุนู ูุฑูุจุงู.`,
        });
        handleFeatureClick(`ุฅุฑุณุงู ุทูุจ ุฏุนู: ${supportTicket.subject}`);
        setSupportTicket({ subject: '', category: '', message: '', bookingId: '' });
    };

    return (
        <div className="space-y-6">
            <div>
                <h1 className="text-3xl font-bold text-slate-800">ุงูุฏุนู ูุงููุณุงุนุฏุฉ</h1>
                <p className="text-slate-500 mt-1">ูุญู ููุง ููุณุงุนุฏุชู ูู ูู ูุง ูุชุนูู ุจููุตุฉ ูููุฉ ุงููููููู. ุฃุฑุณู ุงุณุชูุณุงุฑู ุฃู ุชุตูุญ ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ.</p>
            </div>
            <div className="grid lg:grid-cols-3 gap-6">
                <Card className="lg:col-span-2">
                    <CardHeader><CardTitle className="flex items-center gap-2"><MessageCircle/> ุฅุฑุณุงู ุทูุจ ุฏุนู ููู</CardTitle></CardHeader>
                    <CardContent className="space-y-4">
                        <div>
                            <Label htmlFor="subject">ุงูููุถูุน</Label>
                            <Input id="subject" name="subject" value={supportTicket.subject} onChange={handleInputChange} placeholder="ูุซุงู: ูุดููุฉ ูู ุงูุฏูุน ูุญุฌุฒ ูุงุนุฉ"/>
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <Label htmlFor="category">ุงูุชุตููู</Label>
                                <Select value={supportTicket.category} onValueChange={handleSelectChange}><SelectTrigger><SelectValue placeholder="ุงุฎุชุฑ ุงูุชุตููู"/></SelectTrigger><SelectContent><SelectItem value="payment">ุฏูุน ูุชูููู</SelectItem><SelectItem value="booking">ุญุฌุฒ ุฎุฏูุฉ</SelectItem><SelectItem value="technical">ูุดููุฉ ุชูููุฉ</SelectItem><SelectItem value="general">ุงุณุชูุณุงุฑ ุนุงู</SelectItem></SelectContent></Select>
                            </div>
                            <div>
                                <Label htmlFor="bookingId">ุฑูู ุงูุญุฌุฒ (ุงุฎุชูุงุฑู)</Label>
                                <Input id="bookingId" name="bookingId" value={supportTicket.bookingId} onChange={handleInputChange} placeholder="ูุซุงู: #ุญุฌุฒ1234"/>
                            </div>
                        </div>
                        <div>
                            <Label htmlFor="message">ุงูุฑุณุงูุฉ</Label>
                            <Textarea id="message" name="message" value={supportTicket.message} onChange={handleInputChange} placeholder="ุงุดุฑุญ ูุดููุชู ุจุงูุชูุตูู..." className="min-h-[120px]"/>
                        </div>
                        <Button className="w-full gradient-bg text-white" onClick={handleSubmitTicket}><Send className="w-4 h-4 ml-2"/>ุฅุฑุณุงู</Button>
                    </CardContent>
                </Card>
                 <div className="space-y-6">
                    <Card>
                        <CardHeader><CardTitle className="flex items-center gap-2"><ListChecks/> ุชุฐุงูุฑ ุงูุฏุนู ุงูุฎุงุตุฉ ุจู</CardTitle></CardHeader>
                        <CardContent className="max-h-[200px] overflow-y-auto">
                            {myTickets.length > 0 ? myTickets.map(ticket => (
                                <div key={ticket.id} className="flex justify-between items-center p-2 border-b last:border-b-0 cursor-pointer hover:bg-slate-50" onClick={() => handleFeatureClick(`ุนุฑุถ ุชุฐูุฑุฉ ุงูุฏุนู ${ticket.id}`)}>
                                    <div>
                                        <p className="font-medium text-sm">{ticket.subject} <span className="text-xs text-slate-400">({ticket.id})</span></p>
                                        <p className="text-xs text-slate-500">ุขุฎุฑ ุชุญุฏูุซ: {ticket.lastUpdate}</p>
                                    </div>
                                    <Badge variant={ticket.status === 'ูุบููุฉ' ? 'default' : 'destructive'}>{ticket.status}</Badge>
                                </div>
                            )) : <p className="text-sm text-slate-500 text-center py-4">ูุง ุชูุฌุฏ ุชุฐุงูุฑ ุฏุนู ุญุงููุฉ.</p>}
                        </CardContent>
                    </Card>
                    <Card>
                        <CardHeader><CardTitle className="flex items-center gap-2"><HelpCircle/> ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ</CardTitle></CardHeader>
                        <CardContent className="max-h-[280px] overflow-y-auto">
                            <Accordion type="single" collapsible>
                                {faqs.map(faq => (
                                    <AccordionItem key={faq.id} value={faq.id}>
                                        <AccordionTrigger className="text-sm text-right">{faq.question}</AccordionTrigger>
                                        <AccordionContent className="text-sm">{faq.answer}</AccordionContent>
                                    </AccordionItem>
                                ))}
                            </Accordion>
                        </CardContent>
                    </Card>
                 </div>
            </div>
        </div>
    );
};

export default CustomerSupport;