import React, { useState, Suspense, lazy, memo } from 'react';
import { motion } from 'framer-motion';
import { Ticket, PlusCircle, Star, Building2, UtensilsCrossed, Camera, Music, Palette as PaletteIcon, Truck, Shield as ShieldIcon, Flower2 } from 'lucide-react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useToast } from "@/components/ui/use-toast";
import { Skeleton } from '@/components/ui/skeleton';

const AddServiceDialog = lazy(() => import('@/components/merchant-dashboard/AddServiceDialog'));

const servicesData = {
  venues: {
    title: "ุงููุงุนุงุช ูุงููุตูุฑ",
    icon: Building2,
    supportedTypes: [
      "ูุงุนุฉ ุฒูุงู", "ูุตุฑ ุฃูุฑุงุญ", "ุงุณุชุฑุงุญุฉ ููููุงุณุจุงุช", "ููุชุฌุน ุฎุงุต", "ุตุงูุฉ ูุชุนุฏุฏุฉ ุงูุฃุบุฑุงุถ"
    ],
    features: [
      "ุชุญุฏูุฏ ุงูุณุนุฉ ูุงููุณุงุญุฉ", "ุฅุฏุงุฑุฉ ุงููุฑุงูู (ุตูุชูุงุชุ ุฅุถุงุกุฉุ ููุงูู)", "ุชูููู ุญุฌูุฒุงุช ูุชูุฏู", "ุฅููุงููุฉ ุฅุถุงูุฉ ุตูุฑ ูููุฏูููุงุช ูููุงุนุฉ"
    ]
  },
  catering: {
    title: "ุงูุฅุนุงุดุฉ ูุงูุจูููู",
    icon: UtensilsCrossed,
    supportedTypes: [
      "ุจูููู ููุชูุญ (ุบุฏุงุก/ุนุดุงุก)", "ููุงุฆู ุทุนุงู ูุฎุตุตุฉ", "ุฎุฏูุงุช ุถูุงูุฉ (ูููุฉ ูุดุงู)", "ููู ูุญูููุงุช ููููุงุณุจุงุช"
    ],
    features: [
      "ุชุญุฏูุฏ ุนุฏุฏ ุงูุฃูุฑุงุฏ", "ุงุฎุชูุงุฑ ุฃููุงุน ุงูุฃุทุจุงู ูุงููุดุฑูุจุงุช", "ุฅุฏุงุฑุฉ ุงูุญุณุงุณูุฉ ุงูุบุฐุงุฆูุฉ", "ุชูุณูู ุทุงููุงุช ุงูุทุนุงู ูุงูุฏูููุฑ"
    ]
  },
  photography: {
    title: "ุงูุชุตููุฑ ูุงูููุฏูู",
    icon: Camera,
    supportedTypes: [
      "ุชุตููุฑ ููุชูุบุฑุงูู (ุฒูุงูุ ุฎุทูุจุฉุ ุชุฎุฑุฌ)", "ุชุตููุฑ ููุฏูู ุงุญุชุฑุงูู", "ุชุตููุฑ ุฌูู (ุฏุฑูู)", "ุฃูุจูู ุตูุฑ ูุงุฎุฑ"
    ],
    features: [
      "ุชุญุฏูุฏ ุนุฏุฏ ุณุงุนุงุช ุงูุชุบุทูุฉ", "ุงุฎุชูุงุฑ ุงููุตูุฑ/ุงููุตูุฑุฉ", "ูุนุฑุถ ุฃุนูุงู ุณุงุจู", "ุชุณููู ุงูููุงุฏ ุจุฌูุฏุฉ ุนุงููุฉ"
    ]
  },
  beauty: {
    title: "ุงูุชุฌููู ูุงููููุงุฌ",
    icon: PaletteIcon,
    supportedTypes: [
      "ูููุงุฌ ุนุฑูุณ", "ุชุณุฑูุญุงุช ุดุนุฑ", "ุฎุฏูุงุช ุชุฌููู ุดุงููุฉ (ูุงููููุฑุ ุจุงุฏูููุฑ)", "ุจุงูุฌุงุช ุนูุงูุฉ ุจุงูุจุดุฑุฉ"
    ],
    features: [
      "ุงุฎุชูุงุฑ ุฎุจูุฑุฉ ุงูุชุฌููู", "ุชุญุฏูุฏ ููุน ุงููููุงุฌ ูุงูุชุณุฑูุญุฉ", "ุฅููุงููุฉ ุงูุญุฌุฒ ูู ุงูุตุงููู ุฃู ุงูููุฒู", "ุงุณุชุฎุฏุงู ููุชุฌุงุช ุนุงููุฉ ุงูุฌูุฏุฉ"
    ]
  },
  entertainment: {
    title: "ุงูุนุฑูุถ ุงูุชุฑููููุฉ",
    icon: Music,
    supportedTypes: [
      "ูุฑู ููุณูููุฉ (DJ, ูุฑูุฉ ุดุนุจูุฉ)", "ุนุฑูุถ ุถูุฆูุฉ ูุตูุชูุฉ", "ููุฑุงุช ุชุฑููููุฉ (ุฃูุนุงุจ ูุงุฑูุฉุ ุนุฑูุถ ุจูููุงููุฉ)", "ุชุฃุฌูุฑ ูุนุฏุงุช ุตูุช ูุฅุถุงุกุฉ"
    ],
    features: [
      "ุชุญุฏูุฏ ููุน ุงูุนุฑุถ ููุฏุชู", "ุงุฎุชูุงุฑ ุงูููุงููู ุฃู ุงููุฑูุฉ", "ุชูุณูู ูุน ูุชุทูุจุงุช ุงูููุงู", "ุชูููุฑ ุงููุนุฏุงุช ุงููุงุฒูุฉ"
    ]
  },
  transportation: {
    title: "ุงูููู ูุงูููุงุตูุงุช",
    icon: Truck,
    supportedTypes: [
      "ุณูุงุฑุงุช ูุงุฎุฑุฉ ููุนุฑูุณูู", "ุญุงููุงุช ูููู ุงูุถููู", "ุฎุฏูุงุช ุตู ุงูุณูุงุฑุงุช (Valet Parking)"
    ],
    features: [
      "ุชุญุฏูุฏ ููุน ูุนุฏุฏ ุงูุณูุงุฑุงุช", "ุชุญุฏูุฏ ูุณุงุฑ ุงูุฑุญูุฉ ูุงูููุงุนูุฏ", "ุณุงุฆููู ูุญุชุฑููู", "ุชุฃููู ุดุงูู ููุฑูุงุจ"
    ]
  },
  security: {
    title: "ุงูุญุฑุงุณุฉ ูุงูุฃูู",
    icon: ShieldIcon,
    supportedTypes: [
      "ุญุฑุงุณ ุฃูู ููููุงุณุจุงุช", "ุชุฃููู ูุฏุงุฎู ููุฎุงุฑุฌ ุงููุงุนุฉ", "ูุงููุฑุงุช ูุฑุงูุจุฉ"
    ],
    features: [
      "ุชุญุฏูุฏ ุนุฏุฏ ุงูุญุฑุงุณ ุงููุทููุจูู", "ุชูุณูู ุฎุทุฉ ุฃูููุฉ ููููุงู", "ูุฑู ูุฏุฑุจุฉ ููุคููุฉ"
    ]
  },
  flowers_invitations: {
    title: "ุงููุฑูุฏ ูุงูุฏุนูุงุช",
    icon: Flower2,
    supportedTypes: [
      "ุชูุณูู ุฒููุฑ (ููุดุฉุ ุทุงููุงุช)", "ุจุงูุงุช ูุฑุฏ ููุนุฑูุณ", "ุชุตููู ูุทุจุงุนุฉ ุจุทุงูุงุช ุฏุนูุฉ"
    ],
    features: [
      "ุงุฎุชูุงุฑ ุฃููุงุน ุงูุฒููุฑ ูุงูุฃููุงู", "ุชุตุงููู ูุจุชูุฑุฉ ููุฏุนูุงุช", "ุชูุตูู ูู ุงูููุช ุงููุญุฏุฏ"
    ]
  }
};

const AddServiceDialogFallback = () => (
  <div className="p-4">
    <Skeleton className="h-8 w-1/2" />
    <Skeleton className="h-4 w-3/4 mt-2" />
  </div>
);


const ServiceManagementContent = memo(({ handleNavigation, onFeatureClick }) => {
    const { toast } = useToast();
    const [isAddServiceDialogOpen, setIsAddServiceDialogOpen] = useState(false);
    const [currentServiceCategory, setCurrentServiceCategory] = useState(null);
    const [suggestedServiceNameForDialog, setSuggestedServiceNameForDialog] = useState('');


    const openDialogForNewService = () => {
        setCurrentServiceCategory(null);
        setSuggestedServiceNameForDialog('');
        setIsAddServiceDialogOpen(true);
    };

    const openDialogForCategoryService = (categoryKey, categoryTitle) => {
        setCurrentServiceCategory(categoryKey);
        setSuggestedServiceNameForDialog(`ุฎุฏูุฉ ุฌุฏูุฏุฉ ูู ${categoryTitle}`);
        setIsAddServiceDialogOpen(true);
    };
    
    const handleInternalClick = (featureName, categoryKey = null, categoryTitle = null) => {
        if (featureName === "ุฅุถุงูุฉ ุฎุฏูุฉ ุฌุฏูุฏุฉ") {
            openDialogForNewService();
        } else if (featureName.startsWith("ุฅูุดุงุก ุฎุฏูุฉ ุฌุฏูุฏุฉ ูู ูุฌุงู")) {
            openDialogForCategoryService(categoryKey, categoryTitle);
        } else {
             if (typeof onFeatureClick === 'function') {
                onFeatureClick(featureName);
             } else {
                toast({
                    title: "๐ง ููุฒุฉ ููุฏ ุงูุชุทููุฑ (Fallback)",
                    description: `ูู "ServiceManagementContent (Fallback)": ููุฒุฉ "${featureName}" ููุณุช ููุนูุฉ ุจุนุฏุ ูููู ููููู ุทูุจูุง ูู ุฑุณุงูุชู ุงููุงุฏูุฉ! ๐`,
                    variant: "default",
                });
            }
        }
    };

    return (
        <div className="space-y-8">
            <div className="flex justify-between items-center flex-wrap gap-4">
                <h1 className="text-3xl font-bold text-slate-800">ุฅุฏุงุฑุฉ ุงูุฎุฏูุงุช ูุงูุจุงูุงุช</h1>
                <Button className="gradient-bg text-white" onClick={() => handleInternalClick("ุฅุถุงูุฉ ุฎุฏูุฉ ุฌุฏูุฏุฉ")}>
                    <PlusCircle className="w-5 h-5 ml-2" />
                    ุฅุถุงูุฉ ุจุงูุฉ ุฃู ุฎุฏูุฉ ุฌุฏูุฏุฉ
                </Button>
            </div>

            <Tabs defaultValue="venues" className="w-full" dir="rtl">
                <TabsList className="grid w-full grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-2 h-auto p-2 bg-primary/10 rounded-xl mb-6">
                    {Object.entries(servicesData).map(([key, { title, icon: Icon }]) => (
                        <TabsTrigger 
                            key={key} 
                            value={key} 
                            className="flex-col sm:flex-row items-center justify-center gap-2 text-sm md:text-base py-2.5 data-[state=active]:bg-primary data-[state=active]:text-white data-[state=active]:shadow-lg h-16 sm:h-auto"
                        >
                            <Icon className="h-5 w-5 mb-1 sm:mb-0"/><span>{title}</span>
                        </TabsTrigger>
                    ))}
                </TabsList>

                {Object.entries(servicesData).map(([key, { title, supportedTypes, features }]) => (
                    <TabsContent key={key} value={key}>
                        <motion.div
                            initial={{ opacity: 0, y: 10 }}
                            animate={{ opacity: 1, y: 0 }}
                            transition={{ duration: 0.5 }}
                        >
                            <Card className="overflow-hidden shadow-lg border-t-4 border-primary">
                                <CardHeader className="bg-slate-50">
                                    <CardTitle className="text-2xl">{`ุชูุงุตูู ูุฌุงู ${title}`}</CardTitle>
                                    <CardDescription>ุงุณุชุนุฑุถ ุงูุฃููุงุน ุงููุฏุนููุฉ ูุงููููุฒุงุช ุงูุฎุงุตุฉ ุจูุฐุง ุงููุฌุงู.</CardDescription>
                                </CardHeader>
                                <CardContent className="grid md:grid-cols-2 gap-x-8 gap-y-6 p-6">
                                    <div className="space-y-4">
                                        <h2 className="font-bold text-lg text-slate-700 mb-4 border-b pb-2">๐งฉ ุงูุฃููุงุน ุงููุฏุนููุฉ</h2>
                                        <ul className="space-y-3">
                                            {supportedTypes.map((type, index) => (
                                                <li key={index} className="flex items-center gap-3 text-slate-600">
                                                    <div className="w-5 h-5 bg-primary/20 rounded-md flex items-center justify-center shrink-0">
                                                        <Ticket className="w-3 h-3 text-primary" />
                                                    </div>
                                                    <span>{type}</span>
                                                </li>
                                            ))}
                                        </ul>
                                    </div>
                                    <div className="space-y-4 md:border-r md:border-slate-200 md:pr-8">
                                        <h2 className="font-bold text-lg text-slate-700 mb-4 border-b pb-2">โญ ุงููููุฒุงุช ุงูุฎุงุตุฉ</h2>
                                        <ul className="space-y-3">
                                            {features.map((feature, index) => (
                                                <li key={index} className="flex items-start gap-3 text-slate-600">
                                                    <Star className="w-5 h-5 text-amber-400 mt-0.5 shrink-0" />
                                                    <span>{feature}</span>
                                                </li>
                                            ))}
                                        </ul>
                                    </div>
                                </CardContent>
                                <CardFooter className="bg-slate-50 p-4 flex justify-start">
                                    <Button variant="outline" onClick={() => handleInternalClick(`ุฅูุดุงุก ุฎุฏูุฉ ุฌุฏูุฏุฉ ูู ูุฌุงู ${title}`, key, title)}>
                                        <PlusCircle className="w-4 h-4 ml-2" />
                                        ุฅูุดุงุก ุจุงูุฉ/ุฎุฏูุฉ ุฌุฏูุฏุฉ ูู ูุฐุง ุงููุฌุงู
                                    </Button>
                                </CardFooter>
                            </Card>
                        </motion.div>
                    </TabsContent>
                ))}
            </Tabs>
            <Suspense fallback={<AddServiceDialogFallback />}>
                <AddServiceDialog 
                    isOpen={isAddServiceDialogOpen} 
                    onOpenChange={setIsAddServiceDialogOpen}
                    serviceCategory={currentServiceCategory}
                    suggestedServiceName={suggestedServiceNameForDialog}
                />
            </Suspense>
        </div>
    );
});

export default ServiceManagementContent;