import React, { useState, memo } from 'react';
import { Card, CardHeader, CardTitle, CardContent, CardDescription, CardFooter } from "@/components/ui/card";
import { Button } from '@/components/ui/button';
import { Switch } from "@/components/ui/switch";
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Slider } from "@/components/ui/slider";
import { BrainCircuit, TrendingUp, TrendingDown, DollarSign } from 'lucide-react';
import { useToast } from "@/components/ui/use-toast";
import { ResponsiveContainer, LineChart, Line, XAxis, YAxis, Tooltip } from 'recharts';

const mockPriceData = [
  { name: 'ูุจู 30 ููู', price: 100 },
  { name: 'ูุจู 20 ููู', price: 110 },
  { name: 'ูุจู 10 ุฃูุงู', price: 150 },
  { name: 'ุงูููู', price: 120 },
  { name: 'ุจุนุฏ 10 ุฃูุงู', price: 90 },
  { name: 'ุจุนุฏ 20 ููู', price: 80 },
  { name: 'ุจุนุฏ 30 ููู', price: 75 },
];


const SmartPricingContent = memo(({ handleFeatureClick: propHandleFeatureClick }) => {
    const { toast } = useToast();
    const [isEnabled, setIsEnabled] = useState(false);
    const [aggressiveness, setAggressiveness] = useState([50]);
    const [minPrice, setMinPrice] = useState('');
    const [maxPrice, setMaxPrice] = useState('');

     const handleFeatureClick = (featureName) => {
        if (propHandleFeatureClick && typeof propHandleFeatureClick === 'function') {
            propHandleFeatureClick(featureName);
        } else {
            toast({
                title: "๐ง ููุฒุฉ ููุฏ ุงูุชุทููุฑ",
                description: `ููุฒุฉ "${featureName}" ููุณุช ููุนูุฉ ุจุนุฏุ ูููู ููููู ุทูุจูุง ูู ุฑุณุงูุชู ุงููุงุฏูุฉ! ๐`,
            });
        }
    };

    const handleSave = () => {
        toast({
            title: "ุชู ุงูุญูุธ!",
            description: "ุชู ุญูุธ ุฅุนุฏุงุฏุงุช ุงูุชุณุนูุฑ ุงูุฏููุงูููู ุจูุฌุงุญ.",
        });
        handleFeatureClick("ุญูุธ ุฅุนุฏุงุฏุงุช ุงูุชุณุนูุฑ ุงูุฏููุงูููู");
    };

    return (
        <div className="space-y-8">
            <div className="flex justify-between items-center">
                <h2 className="text-3xl font-bold text-slate-800 flex items-center gap-3"><BrainCircuit className="w-8 h-8 text-primary"/>ุงูุชุณุนูุฑ ุงูุฏููุงูููู (ุชุฌุฑูุจู)</h2>
            </div>
            
            <Card>
                <CardHeader>
                    <div className="flex justify-between items-start">
                        <div>
                            <CardTitle>ุชูุนูู ุงูุชุณุนูุฑ ุงูุฐูู</CardTitle>
                            <CardDescription>ุงุณูุญ ูููุธุงู ุจุชุนุฏูู ุฃุณุนุงุฑู ุชููุงุฆูุงู ุจูุงุกู ุนูู ุงูุทูุจ ูุงูููุงุณู ูุฒูุงุฏุฉ ุฃุฑุจุงุญู.</CardDescription>
                        </div>
                        <div className="flex items-center space-x-2 space-x-reverse pt-1">
                            <Switch id="smart-pricing-toggle" checked={isEnabled} onCheckedChange={(val) => { setIsEnabled(val); handleFeatureClick(`ุชุบููุฑ ุญุงูุฉ ุงูุชุณุนูุฑ ุงูุฐูู ุฅูู ${val}`);}}/>
                            <Label htmlFor="smart-pricing-toggle" className="text-lg font-semibold">{isEnabled ? "ููุนูู" : "ูุชููู"}</Label>
                        </div>
                    </div>
                </CardHeader>
                <CardContent className={`space-y-6 transition-opacity ${isEnabled ? 'opacity-100' : 'opacity-50 pointer-events-none'}`}>
                    <div className="grid md:grid-cols-2 gap-6">
                        <div>
                            <Label htmlFor="minPrice">ุงูุญุฏ ุงูุฃุฏูู ููุณุนุฑ (ุฑูุงู)</Label>
                            <Input id="minPrice" type="number" placeholder="ูุซุงู: 5000" value={minPrice} onChange={(e) => setMinPrice(e.target.value)} />
                            <p className="text-xs text-slate-500 mt-1">ูู ูุชู ุนุฑุถ ุณุนุฑ ุฃูู ูู ูุฐุง ุงููุจูุบ.</p>
                        </div>
                        <div>
                            <Label htmlFor="maxPrice">ุงูุญุฏ ุงูุฃูุตู ููุณุนุฑ (ุฑูุงู)</Label>
                            <Input id="maxPrice" type="number" placeholder="ูุซุงู: 20000" value={maxPrice} onChange={(e) => setMaxPrice(e.target.value)} />
                             <p className="text-xs text-slate-500 mt-1">ูู ูุชู ุนุฑุถ ุณุนุฑ ุฃุนูู ูู ูุฐุง ุงููุจูุบ.</p>
                        </div>
                    </div>
                     <div>
                        <Label>ูุฏู ููุฉ ุชุบููุฑ ุงูุฃุณุนุงุฑ</Label>
                         <div className="flex items-center gap-4 mt-2">
                             <TrendingDown className="text-green-500"/>
                             <Slider defaultValue={aggressiveness} max={100} step={1} onValueChange={setAggressiveness}/>
                             <TrendingUp className="text-red-500"/>
                         </div>
                         <p className="text-center text-sm text-slate-600 mt-1">
                            {aggressiveness < 33 ? 'ุชุบููุฑุงุช ุทูููุฉ ููุญุงูุธุฉ' : aggressiveness < 66 ? 'ุชุบููุฑุงุช ูุชูุงุฒูุฉ' : 'ุชุบููุฑุงุช ูููุฉ ูุฌุฑูุฆุฉ'}
                         </p>
                    </div>
                </CardContent>
                <CardFooter className="flex justify-end border-t pt-4">
                    <Button onClick={handleSave} disabled={!isEnabled}>
                        <DollarSign className="w-4 h-4 ml-2"/> ุญูุธ ุฅุนุฏุงุฏุงุช ุงูุชุณุนูุฑ
                    </Button>
                </CardFooter>
            </Card>

             <Card>
                <CardHeader>
                    <CardTitle>ูุญุงูุงุฉ ุชููุนุงุช ุงูุฃุณุนุงุฑ</CardTitle>
                    <CardDescription>ุฑุณู ุจูุงูู ููุถุญ ููู ูุฏ ุชุชุบูุฑ ุฃุณุนุงุฑู ุจูุงุกู ุนูู ุงูุฅุนุฏุงุฏุงุช ุงูุญุงููุฉ.</CardDescription>
                </CardHeader>
                <CardContent className="h-72">
                    <ResponsiveContainer width="100%" height="100%">
                        <LineChart data={mockPriceData}>
                            <XAxis dataKey="name" fontSize={12} />
                            <YAxis domain={['dataMin - 20', 'dataMax + 20']} fontSize={12} />
                            <Tooltip formatter={(value) => [`${value} ุฑูุงู`, 'ุงูุณุนุฑ ุงููุชููุน']} />
                            <Line type="monotone" dataKey="price" stroke="var(--color-primary)" strokeWidth={2} />
                        </LineChart>
                    </ResponsiveContainer>
                </CardContent>
            </Card>
        </div>
    );
});

export default SmartPricingContent;