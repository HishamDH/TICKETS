import React, { useState } from 'react';
import { Card, CardHeader, CardTitle, CardContent, CardDescription } from "@/components/ui/card";
import { Button } from '@/components/ui/button';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { CheckCircle2, XCircle, Clock, Banknote, Timer, Download, Filter, Search } from 'lucide-react';
import { useToast } from "@/components/ui/use-toast";
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

const initialPayoutRequests = [
    { id: 'pr1', merchant: 'ูุตุฑ ุงูุฃูุฑุงุญ ุงูููููุฉ', amount: '12,500 ุฑูุงู', date: '2025-06-15', status: 'ุจุงูุชุธุงุฑ ุงููุฑุงุฌุนุฉ', bank: 'ุงูุจูู ุงูุฃููู - **** 1234', transactionId: null },
    { id: 'pr2', merchant: 'ุงุณุชูุฏูู ุงูุฅุจุฏุงุน ููุชุตููุฑ', amount: '8,000 ุฑูุงู', date: '2025-06-14', status: 'ุจุงูุชุธุงุฑ ุงููุฑุงุฌุนุฉ', bank: 'ุจูู ุงูุฑุงุฌุญู - **** 5678', transactionId: null },
    { id: 'pr3', merchant: 'ุจูููู ุงููุฑู ููุถูุงูุฉ', amount: '5,200 ุฑูุงู', date: '2025-06-12', status: 'ููุชููุฉ', bank: 'ุจูู ุงูุฑูุงุถ - **** 9012', transactionId: 'TRX12345' },
    { id: 'pr4', merchant: 'ุฒููุฑ ุงูุฑุจูุน ููุชูุณูู', amount: '3,000 ุฑูุงู', date: '2025-06-11', status: 'ูุฑููุถุฉ', bank: 'ุงูุจูู ุงูุณุนูุฏู ุงููุฑูุณู - **** 3456', transactionId: null, reason: 'ูุนูููุงุช ุจูููุฉ ุบูุฑ ุตุญูุญุฉ' },
];

const PayoutsManagement = ({ handleNavigation, handleFeatureClick: propHandleFeatureClick }) => {
    const { toast } = useToast();
    const [payoutRequests, setPayoutRequests] = useState(initialPayoutRequests);
    const [searchTerm, setSearchTerm] = useState('');
    const [activeTab, setActiveTab] = useState('pending');

    const handleFeatureClick = (featureName) => {
        if (propHandleFeatureClick && typeof propHandleFeatureClick === 'function') {
            propHandleFeatureClick(featureName);
        } else {
            toast({
                title: "๐ง ููุฒุฉ ููุฏ ุงูุชุทููุฑ",
                description: `ููุฒุฉ "${featureName}" ููุณุช ููุนูุฉ ุจุนุฏุ ูููู ููููู ุทูุจูุง ูู ุฑุณุงูุชู ุงููุงุฏูุฉ! ๐`,
            });
        }
    };

    const handlePayoutAction = (requestId, newStatus, reason = '') => {
        const request = payoutRequests.find(r => r.id === requestId);
        setPayoutRequests(prev => prev.map(req => 
            req.id === requestId ? { ...req, status: newStatus, reason: newStatus === 'ูุฑููุถุฉ' ? reason : req.reason, transactionId: newStatus === 'ููุชููุฉ' ? `TRX${Math.random().toString().slice(2,8)}` : null } : req
        ));
        handleFeatureClick(`ุชุญุฏูุซ ุญุงูุฉ ุทูุจ ุงูุณุญุจ ${requestId} ูู ${request?.merchant} ุฅูู "${newStatus}"`);
    };

    const filteredRequests = (status) => payoutRequests.filter(r => 
        r.status === status && 
        (r.merchant.toLowerCase().includes(searchTerm.toLowerCase()) || r.bank.toLowerCase().includes(searchTerm.toLowerCase()))
    );
    
    const renderTableContent = (status) => (
         <Table>
            <TableHeader>
                <TableRow>
                    <TableHead>ูุฒููุฏ ุงูุฎุฏูุฉ</TableHead>
                    <TableHead>ุงููุจูุบ</TableHead>
                    <TableHead>ุชุงุฑูุฎ ุงูุทูุจ</TableHead>
                    <TableHead>ุงูุญุณุงุจ ุงูุจููู</TableHead>
                    {status === 'ููุชููุฉ' && <TableHead>ุฑูู ุงูุนูููุฉ</TableHead>}
                    {status === 'ูุฑููุถุฉ' && <TableHead>ุณุจุจ ุงูุฑูุถ</TableHead>}
                    {status === 'ุจุงูุชุธุงุฑ ุงููุฑุงุฌุนุฉ' && <TableHead className="text-left">ุฅุฌุฑุงุก</TableHead>}
                </TableRow>
            </TableHeader>
            <TableBody>
                {filteredRequests(status).map((req) => (
                    <TableRow key={req.id}>
                        <TableCell className="font-medium">{req.merchant}</TableCell>
                        <TableCell>{req.amount}</TableCell>
                        <TableCell>{req.date}</TableCell>
                        <TableCell className="text-slate-500 text-xs">{req.bank}</TableCell>
                        {status === 'ููุชููุฉ' && <TableCell className="text-xs text-green-600">{req.transactionId}</TableCell>}
                        {status === 'ูุฑููุถุฉ' && <TableCell className="text-xs text-red-600">{req.reason}</TableCell>}
                        {status === 'ุจุงูุชุธุงุฑ ุงููุฑุงุฌุนุฉ' && (
                            <TableCell className="text-left">
                                <div className="flex gap-2 justify-end">
                                    <Button size="sm" variant="outline" className="text-emerald-600 border-emerald-600 hover:bg-emerald-50" onClick={() => handlePayoutAction(req.id, 'ููุชููุฉ')}><CheckCircle2 className="w-4 h-4 ml-2"/>ููุงููุฉ</Button>
                                    <Button size="sm" variant="outline" className="text-red-600 border-red-600 hover:bg-red-50" onClick={() => handlePayoutAction(req.id, 'ูุฑููุถุฉ', 'ุจูุงูุงุช ุบูุฑ ูุงููุฉ')}><XCircle className="w-4 h-4 ml-2"/>ุฑูุถ</Button>
                                </div>
                            </TableCell>
                        )}
                    </TableRow>
                ))}
                {filteredRequests(status).length === 0 && (
                    <TableRow><TableCell colSpan={status === 'ุจุงูุชุธุงุฑ ุงููุฑุงุฌุนุฉ' ? 6 : (status === 'ููุชููุฉ' || status === 'ูุฑููุถุฉ' ? 5 : 4)} className="h-24 text-center">ูุง ุชูุฌุฏ ุทูุจุงุช ุชุทุงุจู ุงูุจุญุซ ูู ูุฐู ุงููุฆุฉ.</TableCell></TableRow>
                )}
            </TableBody>
        </Table>
    );

    return (
        <div className="space-y-6">
            <div>
                <h1 className="text-3xl font-bold text-slate-800">ุฅุฏุงุฑุฉ ุทูุจุงุช ุงูุณุญุจ</h1>
                <p className="text-slate-500 mt-1">ูุฑุงุฌุนุฉ ูุงุนุชูุงุฏ ุทูุจุงุช ุณุญุจ ุงูุฃุฑุตุฏุฉ ูู ูุฒููุฏู ุงูุฎุฏูุงุช.</p>
            </div>

            <div className="grid md:grid-cols-3 gap-6">
                <Card className="cursor-pointer hover:shadow-lg" onClick={() => handleFeatureClick("ุนุฑุถ ุชูุงุตูู ุฅุฌูุงูู ุงููุณุญูุจ")}>
                    <CardHeader><CardTitle className="flex items-center gap-2"><Banknote/>ุฅุฌูุงูู ุงููุณุญูุจ (ุงูุดูุฑ)</CardTitle></CardHeader>
                    <CardContent className="text-3xl font-bold">120,750 ุฑูุงู</CardContent>
                </Card>
                <Card className="cursor-pointer hover:shadow-lg" onClick={() => handleFeatureClick("ุนุฑุถ ุชูุงุตูู ุงูุทูุจุงุช ุงููุนููุฉ")}>
                    <CardHeader><CardTitle className="flex items-center gap-2"><Clock/>ุทูุจุงุช ูุนููุฉ</CardTitle></CardHeader>
                    <CardContent className="text-3xl font-bold">{payoutRequests.filter(r=>r.status === 'ุจุงูุชุธุงุฑ ุงููุฑุงุฌุนุฉ').length}</CardContent>
                </Card>
                <Card className="cursor-pointer hover:shadow-lg" onClick={() => handleFeatureClick("ุนุฑุถ ุชูุงุตูู ูุชูุณุท ููุช ุงูุชุญููู")}>
                    <CardHeader><CardTitle className="flex items-center gap-2"><Timer/>ูุชูุณุท ููุช ุงูุชุญููู</CardTitle></CardHeader>
                    <CardContent className="text-3xl font-bold">24 ุณุงุนุฉ</CardContent>
                </Card>
            </div>

            <Card>
                <Tabs value={activeTab} onValueChange={setActiveTab}>
                    <CardHeader className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
                        <TabsList className="grid w-full md:w-auto grid-cols-3">
                            <TabsTrigger value="pending" onClick={() => handleFeatureClick("ุนุฑุถ ุทูุจุงุช ุงูุณุญุจ ุงููุนููุฉ")}>ุจุงูุชุธุงุฑ ุงููุฑุงุฌุนุฉ</TabsTrigger>
                            <TabsTrigger value="completed" onClick={() => handleFeatureClick("ุนุฑุถ ุทูุจุงุช ุงูุณุญุจ ุงูููุชููุฉ")}>ููุชููุฉ</TabsTrigger>
                            <TabsTrigger value="rejected" onClick={() => handleFeatureClick("ุนุฑุถ ุทูุจุงุช ุงูุณุญุจ ุงููุฑููุถุฉ")}>ูุฑููุถุฉ</TabsTrigger>
                        </TabsList>
                        <div className="flex gap-2 w-full md:w-auto">
                            <div className="relative flex-grow">
                                <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-slate-400" />
                                <Input 
                                    placeholder="ุจุญุซ ุจุงูุชุงุฌุฑ ุฃู ุงูุจูู..." 
                                    className="pl-10 w-full"
                                    value={searchTerm}
                                    onChange={(e) => {setSearchTerm(e.target.value); handleFeatureClick(`ุงูุจุญุซ ูู ุทูุจุงุช ุงูุณุญุจ ุนู: ${e.target.value}`);}}
                                />
                            </div>
                            <Button variant="outline" onClick={() => handleFeatureClick("ุชุตุฏูุฑ ุชูุฑูุฑ ุทูุจุงุช ุงูุณุญุจ")}><Download className="w-4 h-4 ml-2"/>ุชุตุฏูุฑ</Button>
                        </div>
                    </CardHeader>
                    <CardContent>
                        <TabsContent value="pending">{renderTableContent('ุจุงูุชุธุงุฑ ุงููุฑุงุฌุนุฉ')}</TabsContent>
                        <TabsContent value="completed">{renderTableContent('ููุชููุฉ')}</TabsContent>
                        <TabsContent value="rejected">{renderTableContent('ูุฑููุถุฉ')}</TabsContent>
                    </CardContent>
                </Tabs>
            </Card>
        </div>
    );
};

export default React.memo(PayoutsManagement);